@startuml singleton
skinparam classFontSize 16

class Singleton {
        
    - {static} instance:Singleton

    + {static} getInstance():Singleton
}
@enduml

@startuml singleton_enum
skinparam classFontSize 16

enum Singleton {
        
    + {Static} INSTANCE

}
@enduml


@startuml observer
skinparam classFontSize 16

abstract class Subject {
    + addObserver(o: Observer)
    + removeObserver(o: Observer)
    # notify()    
}

interface Observer {
    + update()
}

Subject o-> "*" Observer

class ConcreteSubject extends Subject

class ConcreteObserver implements Observer

@enduml

@startuml observer_seq 
hide footbox

actor Observer1
actor Observer2
participant Subject 


Observer1 -> Subject : addObserver
activate Subject
return
Observer2 -> Subject : addObserver
activate Subject
return

activate Client
Subject <- Client : modify
activate Subject
Subject -> Subject : notify
activate Subject

Subject -> Observer1 : update()
activate Observer1
return 

Subject -> Observer2 : update()
activate Observer2
return 

return
return

@enduml

@startuml composite
abstract class Component

class Leaf 
class Composite  
Component <|-- Composite
Component "*" <--o Composite 

Component <|-- Leaf

@enduml

@startuml mediator
skinparam Linetype ortho

interface Mediator {
    + send(target, message)
}

interface Colleague {
    + receive(message)
}



class ConcreteColleague1 extends Colleague
class ConcreteColleague2 extends Colleague

class ConcreteMediator extends Mediator
ConcreteMediator o-> ConcreteColleague1
ConcreteMediator o-> ConcreteColleague2

Mediator <- Colleague

@enduml

@startuml visitor
skinparam Linetype ortho

abstract class Element {
    + accept(v: Visitor)
}
Element <|-- ConcreteElementA 
Element <|-- ConcreteElementB 

interface Visitor {
    + visit(e: Element)
}
Visitor <|-- ConcreteVisitor

Client --> Visitor
Client --> Element

@enduml

@startuml visitor_seq 
    hide footbox


    participant Visitor
    participant Client
    participant ParentElement
    participant ChildElementA
    participant ChildElementB

    activate Visitor
    Visitor -> Client : call(visitor)
    activate Client
    Client -> ParentElement : accept(visitor)
    activate ParentElement
    ParentElement -> Visitor : visit(parentElement)
    activate Visitor
    return
    ParentElement -> ChildElementA : accept(visitor)
    activate ChildElementA
    ChildElementA -> Visitor : visit(childElementA)
    activate Visitor
    return
    return
    ParentElement -> ChildElementB : accept(visitor)
    activate ChildElementB
    ChildElementB -> Visitor : visit(childElementB)
    activate Visitor
    return
    return
    return
    return
@enduml

@startuml strategy
class Context {
    + action()
}

interface Strategy {
    + algorithm()
}
Strategy <|.. StrategyA
Strategy <|.. StrategyB

Context o-> "1" Strategy
@enduml

@startuml state
class Context {
    + action()
}

interface State {
    + handle()
}
State <|.. StateA
State <|.. StateB

Context o-> "1" State
@enduml

@startuml decorator

abstract class Component {
  + operation()
}
class ConcreteComponent {
    + operation()
}
Component <|-- ConcreteComponent
abstract class Decorator {
    + operation()
}
Component <|-- Decorator
Decorator o--> "1" Component


class SuperpowerA extends Decorator {
    + operation()
}

class SuperpowerB extends Decorator {
    + operation()
}

@enduml